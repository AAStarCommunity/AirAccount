# Generated by Cargo
# will have compiled files and executables
/target/
**/target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
*.log
logs/
log/

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# Test outputs (keep test_reports/ but ignore temporary test files)
test-results/
junit.xml

# Temporary files
tmp/
temp/
*.tmp

# Build artifacts
build/
dist/
out/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Local development
.local/
local/

# Documentation build
docs/_build/
book/book/

# Backup files
*.bak
*.backup

# Security - Never commit these
*.key
*.pem
*.p12
*.keystore
secrets/
private/

# OP-TEE specific
*.ta
optee_armtz/
optee_client/
optee_os/

# Binary outputs
*.bin
*.out
*.exe

# Node.js (for any JS tooling)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Python (for any Python tooling)
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/

# Editor specific
.vim/
.emacs.d/
*.sublime-project
*.sublime-workspace

# Profiling
*.prof
*.trace

# Flamegraph
flamegraph.svg
perf.data*

# Security audit artifacts (temporary files)
cargo-audit.txt
cargo-deny.txt
cargo-geiger.txt
cargo-outdated.txt
security-check.txt
sbom.json
sbom.txt
# Keep final security reports in docs/security/
# security-report.md - if in docs/security/, it should be committed

# Cargo advisory database
~/.cargo/advisory-db/