# Licensed to AirAccount under the Apache License, Version 2.0
# Dockerfile for building AirAccount TA and CA in ARM64 Linux environment

FROM ubuntu:22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV RUST_HOME="/usr/local/rust"
ENV RUSTUP_HOME="/usr/local/rustup"
ENV CARGO_HOME="/usr/local/cargo"
ENV PATH="$CARGO_HOME/bin:$RUST_HOME/bin:$PATH"
ENV CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
ENV CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
ENV AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
ENV STRIP_aarch64_unknown_linux_gnu=aarch64-linux-gnu-strip

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    cmake \
    python3 \
    python3-pip \
    python3-cryptography \
    python3-pyelftools \
    libssl-dev \
    pkg-config \
    gcc-aarch64-linux-gnu \
    g++-aarch64-linux-gnu \
    libc6-dev-arm64-cross \
    && rm -rf /var/lib/apt/lists/*

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
RUN $CARGO_HOME/bin/rustup target add aarch64-unknown-linux-gnu
RUN $CARGO_HOME/bin/rustup component add rustfmt clippy

# Set working directory
WORKDIR /workspace

# Copy source code
COPY . .

# Configure cargo for cross compilation
RUN mkdir -p .cargo && cat > .cargo/config.toml << 'EOF'
[target.aarch64-unknown-linux-gnu]
linker = "aarch64-linux-gnu-gcc"

[build]
target = "aarch64-unknown-linux-gnu"

[env]
CC_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-gcc"
CXX_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-g++"
AR_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-ar"
STRIP_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-strip"
PKG_CONFIG_ALLOW_CROSS = "1"
EOF

# Build OP-TEE client libraries
RUN cd third_party/incubator-teaclave-trustzone-sdk/optee/optee_client && \
    mkdir -p build && cd build && \
    cmake -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
          -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
          -DCMAKE_SYSTEM_NAME=Linux \
          -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
          -DCMAKE_INSTALL_PREFIX=/workspace/third_party/incubator-teaclave-trustzone-sdk/optee/optee_client/export_arm64/usr \
          .. && \
    make -j$(nproc) && \
    make install

# Build script for TA and CA
RUN cat > build_ta_ca.sh << 'EOF'
#!/bin/bash
set -e

echo "🚀 Building AirAccount TA and CA in Docker environment"
echo "================================================="

# Set environment for OP-TEE
export OPTEE_CLIENT_EXPORT="/workspace/third_party/incubator-teaclave-trustzone-sdk/optee/optee_client/export_arm64"
export PKG_CONFIG_PATH="$OPTEE_CLIENT_EXPORT/usr/lib/pkgconfig"
export LD_LIBRARY_PATH="$OPTEE_CLIENT_EXPORT/usr/lib:$LD_LIBRARY_PATH"

# Build TA first
echo "Building Trusted Application..."
cd packages/ta-arm-trustzone

# Check if we need to create the optee target
if ! rustup target list --installed | grep -q aarch64-unknown-optee; then
    echo "Creating aarch64-unknown-optee target..."
    # Copy existing target config
    TARGET_DIR="$(rustc --print target-libdir)/../../../lib/rustlib"
    if [ ! -d "$TARGET_DIR/aarch64-unknown-optee" ]; then
        mkdir -p "$TARGET_DIR/aarch64-unknown-optee"
        cp -r "$TARGET_DIR/aarch64-unknown-linux-gnu"/* "$TARGET_DIR/aarch64-unknown-optee/" || true
    fi
fi

# Try building TA (may need special setup)
cargo build --target aarch64-unknown-linux-gnu --release || {
    echo "⚠️ TA build failed - this is expected in standard Linux environment"
    echo "TA requires specialized OP-TEE build environment"
}

# Build CA
echo "Building Client Application..."
cd ../client-ca
cargo build --target aarch64-unknown-linux-gnu --release

echo "✅ Build completed!"
echo "CA binary: target/aarch64-unknown-linux-gnu/release/airaccount-ca"
EOF

RUN chmod +x build_ta_ca.sh

# Default command
CMD ["./build_ta_ca.sh"]