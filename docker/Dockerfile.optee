# OP-TEE QEMU开发环境Dockerfile
FROM ubuntu:22.04

# 设置非交互式安装
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai

# 安装基础工具和依赖
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    curl \
    wget \
    python3 \
    python3-pip \
    pkg-config \
    libssl-dev \
    qemu-system-arm \
    qemu-user-static \
    device-tree-compiler \
    gcc-arm-linux-gnueabihf \
    gcc-aarch64-linux-gnu \
    binutils-arm-linux-gnueabihf \
    binutils-aarch64-linux-gnu \
    cmake \
    ninja-build \
    xxd \
    uuid-dev \
    libgmp-dev \
    netcat \
    socat \
    && rm -rf /var/lib/apt/lists/*

# 安装Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# 安装ARM交叉编译工具链
RUN rustup target add armv7-unknown-linux-gnueabihf
RUN rustup target add aarch64-unknown-linux-gnu

# 设置工作目录
WORKDIR /workspace

# 复制项目文件
COPY . .

# 构建OP-TEE环境
RUN if [ -f "scripts/setup_optee_env.sh" ]; then \
        chmod +x scripts/setup_optee_env.sh && \
        scripts/setup_optee_env.sh; \
    fi

# 设置环境变量
ENV OPTEE_DIR=/workspace/third_party
ENV TA_DEV_KIT_DIR=/workspace/third_party/optee_os/out/arm/export-ta_arm32
ENV TEEC_EXPORT=/workspace/third_party/optee_client/out/export
ENV HOST_CROSS_COMPILE=arm-linux-gnueabihf-
ENV TA_CROSS_COMPILE=arm-linux-gnueabihf-

# 创建TEE服务脚本
RUN mkdir -p /tee/scripts
COPY docker/scripts/start-tee-service.sh /tee/scripts/
RUN chmod +x /tee/scripts/start-tee-service.sh

# 创建健康检查脚本
COPY docker/scripts/tee-health-check.sh /workspace/scripts/
RUN chmod +x /workspace/scripts/tee-health-check.sh

# 暴露端口
EXPOSE 5000 22 8080

# 启动TEE服务
CMD ["/tee/scripts/start-tee-service.sh"]